[
{
	"uri": "http://devdocs.prestashop.com/1.7/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": " Chapter 1 Basics Discover what PrestaShop is all about and the core concepts behind it.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/themes/guidelines/",
	"title": "Guidelines and coding standards",
	"tags": [],
	"description": "",
	"content": " Guidelines and coding standards Compatibility PHP Code Your PHP code should be compatible with the following versions:\n PrestaShop 1.7.0  ~ 1.7.3  : at least PHP 5.4 PrestaShop 1.7.4  : at least PHP 5.6  HTML / CSS / Javascript Your HTML/CSS/JS code should work with at least:\n IE9+ Edge Firefox 45 Chrome 29.  Mobile-wise:\n iOS 8.4 Android Browser 4.4  Standards General Use spaces for indentation in every language (PHP, HTML, CSS, etc.):\n4 spaces for PHP files, 2 spaces for all other file types.\nUse our .editorconfig file in order to easily configure your editor: https://github.com/PrestaShop/PrestaShop/blob/develop/.editorconfig\nPHP files You should follow the PSR-2 standard, just like PrestaShop does.\nIn general, we tend to follow the Symfony coding standards.\nHTML files Use HTML 5 tags:\n \u0026lt;br /\u0026gt; → \u0026lt;br\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;section\u0026gt; etc.  All open tags must be closed in the same file (a \u0026lt;div\u0026gt; should not be opened in header.tpl then closed in footer.tpl). Subtemplates (templates meant to be included in another template) must reside inside a /_partials/ folder.\nCSS files Use CSS3.\nWe recommend that you follow the RSCSS structure\nJavascript Make sure your linter tool follows our .eslint file: https://github.com/PrestaShop/PrestaShop/blob/develop/.eslintrc\nIf you wish to write ECMAScript 2015 (ES6) code, we recommend using the Babel compiler to maximize compatibility.\nA good JS practice consists in splitting files per use, and then compiling them into one.\nLearn more about the ES2015 standard: https://babeljs.io/docs/learn-es2015/\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/documentation/why/",
	"title": "Why write documentation",
	"tags": [],
	"description": "",
	"content": " Why write technical documentation?  The best documentation is no documentation: code should be self-explanatory.\nAll the lazy developers in history\n Writing documentation is hard.\nWe try to find excuses and rationalize and lie to ourselves so we can feel better about with the fact that we should be doing it, but it\u0026rsquo;s \u0026ldquo;too much work\u0026rdquo;.\nHere are two good reasons to try and convince you to start writing documentation, and help you while you help others, too:\n1. You won\u0026rsquo;t remember that 6 months from now Just fixed a bug? Written a new feature? Cool! You may think you know your code now, but if you come bak to it 6 months later, you will have forgotten most about. It will be as if someone else had written it.\nWrite it down now that it\u0026rsquo;s fresh on your mind. You will be happy you did it when you come back later looking for help finding out how \u0026ldquo;this\u0026rdquo; was done and how does \u0026ldquo;that\u0026rdquo; work.\nWhich bring us to\u0026hellip;\n2. Grep is sub-optimal Why browse the sources and reverse-engineer code when you can read a paragraph that\u0026rsquo;s written for humans? It\u0026rsquo;s not efficient to read 600 lines of code and run them in your head when you could simply google it.\nRemember, code is for computers and documentation is for humans. If you are reading this, that means you\u0026rsquo;re probably a human. Optimize for your time, too.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/development/coding_standards/",
	"title": "Coding standards",
	"tags": [],
	"description": "",
	"content": " Coding standards Consistency is important, even more so when writing open-source code, since the code belongs to millions of eyeballs, and bug-fixing relies on these teeming millions to actually locate bugs and understand how to solve them.\nThis is why, when writing anything for PrestaShop, be it a theme, a module or a core patch, you should strive to follow the following guidelines. They are the ones that PrestaShop\u0026rsquo;s developers adhere to, and following them is the surest way to have your code be elegantly integrated in PrestaShop.\nIn short, code consistency helps keeping the code readable and maintainable.\nGeneral conventions All files containing code MUST:\n Use only UTF-8 without BOM. Use the Unix LF (linefeed) line ending. End with a single blank line.  PHP code conventions PHP files MUST follow the PSR-2 standard alongside Symfony standards.\nAltough Yoda conditions are suggested, they are not enforced.\n Javascript code conventions Javascript files MUST follow the Airbnb Javascript style guide.\nHTML, CSS (Sass), Twig \u0026amp; Smarty code conventions HTML, CSS (Sass), Twig and Smarty files MUST follow the Mark Otto\u0026rsquo;s coding standards. Mark is the creator of the Bootstrap framework.\nLicense information All PrestaShop files MUST start with the PrestaShop license block:\nCore files /** * 2007-2018 PrestaShop * * NOTICE OF LICENSE * * This source file is subject to the Open Software License (OSL 3.0) * that is bundled with this package in the file LICENSE.txt. * It is also available through the world-wide-web at this URL: * https://opensource.org/licenses/OSL-3.0 * If you did not receive a copy of the license and are unable to * obtain it through the world-wide-web, please send an email * to license@prestashop.com so we can send you a copy immediately. * * DISCLAIMER * * Do not edit or add to this file if you wish to upgrade PrestaShop to newer * versions in the future. If you wish to customize PrestaShop for your * needs please refer to http://www.prestashop.com for more information. * * @author PrestaShop SA \u0026lt;contact@prestashop.com\u0026gt; * @copyright 2007-2018 PrestaShop SA * @license https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0) * International Registered Trademark \u0026amp; Property of PrestaShop SA */  Module files /** * 2007-2018 PrestaShop * * NOTICE OF LICENSE * * This source file is subject to the Academic Free License (AFL 3.0) * that is bundled with this package in the file LICENSE.txt. * It is also available through the world-wide-web at this URL: * http://opensource.org/licenses/afl-3.0.php * If you did not receive a copy of the license and are unable to * obtain it through the world-wide-web, please send an email * to license@prestashop.com so we can send you a copy immediately. * * DISCLAIMER * * Do not edit or add to this file if you wish to upgrade PrestaShop to newer * versions in the future. If you wish to customize PrestaShop for your * needs please refer to http://www.prestashop.com for more information. * * @author PrestaShop SA \u0026lt;contact@prestashop.com\u0026gt; * @copyright 2007-2018 PrestaShop SA * @license http://opensource.org/licenses/afl-3.0.php Academic Free License (AFL 3.0) * International Registered Trademark \u0026amp; Property of PrestaShop SA */  "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/development/",
	"title": "Development",
	"tags": [],
	"description": "",
	"content": " Chapter 2 Development "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/themes/getting_started/",
	"title": "Getting started with theme development",
	"tags": [],
	"description": "",
	"content": " Getting started "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/documentation/how/",
	"title": "How to contribute",
	"tags": [],
	"description": "",
	"content": " How to contribute to PrestaShop\u0026rsquo;s documentation TL;DR – Contributing is super easy! Edit any page by clicking on the \u0026ldquo;Improve this page\u0026rdquo; link at the top right corner of your screen.\nGetting started There are two ways to contribute to this documentation:\nEdit on GitHub You can pretty much everything directly on GitHub! Click on the \u0026ldquo;Improve this page\u0026rdquo; at the top right of the page you want to edit.\nStandard git workflow Fork the project on GitHub, work on a separate branch, push to your fork and submit a Pull Request.\nGit workflow is recommended if you already know your way around the git workflow, or if you want to work on the site itself. It will also allow you to build the site locally and check out exactly how your changes will look.\n The documentation source code is located in the following GitHub URL:\nhttps://github.com/PrestaShop/docs/tree/hugo\n Note that we are currently using the hugo branch instead of master. This will change after the legacy documentation is fully migrated, and the old site phased out.\n Writing Markdown This site was created using the wonderful Hugo static site generator, but the content itself is written using Markdown.\nDon\u0026rsquo;t worry, you don\u0026rsquo;t need to know anything about Hugo or the Go language to write documentation. The Markdown syntax is basically plain text with some simple added syntax for styling.\nIf you don\u0026rsquo;t know Markdown yet, have a look at this quick Markdown guide from GitHub.\nExtended features: Shortcodes Hugo uses special short codes for many things. Read about them here.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/testing/",
	"title": "Testing",
	"tags": [],
	"description": "",
	"content": " Chapter 3 Testing "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/documentation/",
	"title": "Documentation",
	"tags": [],
	"description": "",
	"content": " Chapter 4 Documentation "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/basics/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Fundamentals of PrestaShop Development PrestaShop was conceived so that third-party modules could easily build upon its foundations, making it an extremely customizable e-commerce software.\nPrestaShop’s customization is based on three possibilities:\n Themes, Modules, Overriding.  Themes are explored in full in the Designer Guide.\nModules and the override system are explored in this Developer Guide, starting with the “Concepts” section below. You can learn more about each in the following chapters:\nBy default, PrestaShop is provided with more than 100 modules, enabling you to launch your online business quickly and for free.\nMore than 3000 modules are also available on the Addons marketplace. These additional modules were built by the PrestaShop company or members of the PrestaShop community, and are sold at affordable prices. As a developer, you can also share your modules on this site, and receive 70% of the amounts associated with the sale of your creations. Sign up now!\n Concepts You should be familiar with PHP and Object-Oriented Programming before attempting to write your own module.\nYou can learn PHP here:\n http://www.php.net/manual/en/getting-started.php http://www.codecademy.com/tracks/php  You can learn Object-Oriented programming here:\n http://en.wikipedia.org/wiki/Object-oriented_programming http://net.tutsplus.com/tutorials/php/object-oriented-php-for-beginners/  A module is an extension to PrestaShop that enables any developer to add the following:\n Provide additional functionality to PrestaShop. View additional items on the site (product selection, etc.). Communicate with other e-commerce services (buying guides, payment platforms, logistics, etc.).  Overriding is a system in itself. PrestaShop uses completely object-oriented code. One of the advantages of this is that, with the right code architecture, you can easily replace or extend parts of the core code with your own custom code, without having to touch the core code. Your code thus overrides the core code, making PrestaShop behave as you prefer it to. It is not recommended to use an override in a module that you intend to distribute (for instance through the PrestaShop Addons marketplace), and they are forbidden in partner modules. Keep them for your own shop.\nPrestaShop’s technical architecture PrestaShop is based on a 3-tier architecture:\n Object/data. Database access is controlled through files in the “classes” folder. Data control. User-provided content is controlled by files in the root folder. Design. All of the theme’s files are in the “themes” folder.  This is the same principle as the Model\u0026gt;View\u0026gt;Controller (MVC) architecture, only in a simpler and more accessible way.\nWhile all versions of PrestaShop up to 1.6 took pride in only using a custom architecture, it was decided to incorporate the Symfony PHP framework starting with PrestaShop 1.7.\nThe driving idea is that we want our code to be more robust, more modular, and fully testable. The 1.6 architecture, inherited from version 1.5 and years of PrestaShop development, is not getting any younger, and its age is really starting to show.\nUsing a proven and popular open-source framework will allow us to focus on our core business code (managing a cart, handling orders, calculating prices and taxes, generating invoices, etc.) with greater efficiency, while enjoying the stability of a globally recognized framework.\nA 3-tier architecture has many advantages:\n It’s easier to read the software’s code. Developers can add and edit code faster. Graphic designer and HTML integrators can work with the confines of the /themes folder without having to understand or even read a single line of PHP code. Developers can work on additional data and modules that the HTML integrators can make use of.  Model A model represents the application’s behavior: data processing, database interaction, etc.\nIt describes or contains the data that have been processed by the application. It manages this data and guarantees its integrity.\nView A view is the interface with which the user interacts.\nIts first role is to display the data that is been provided by the model. Its second role is to handle all the actions from the user (mouse click, element selection, buttons, etc.), and send these events to the controller.\nThe view does not do any processing; it only displays the result of the processing performed by the model, and interacts with the user.\nController The Controller manages synchronization events between the Model and the View, and updates both as needed. It receives all the user events and triggers the actions to perform.\nIf an action needs data to be changed, the Controller will “ask” the Model to change the data, and in turn the Model will notify the View that the data has been changed, so that the View can update itself.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/modules/",
	"title": "Modules",
	"tags": [],
	"description": "",
	"content": " Chapter 5 Modules "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/themes/",
	"title": "Themes",
	"tags": [],
	"description": "",
	"content": " Chapter 6 Themes The default PrestaShop install offers a neutral theme in black and white, enabling sellers to quickly and freely start their activity, whatever their business line.\nMore than 3000 themes are available at the PrestaShop Addons marketplace. They were created either by members of the PrestaShop community or the PrestaTeam, and are sold at reasonable prices – some are even free.\nAs a graphic designer/web developer, you too can put your themes up for sale on the PrestaShop Addons marketplace, and earn 70% of the selling price.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/basics/installation/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": " Configuring PrestaShop By default, PrestaShop is configured to provide a secure and stable environment to both the shop administrator and the customers.\nAs a developer, there are several changes that you could and should bring to the default installation in order to help you code better, spot bugs faster, and generally make a great PrestaShop product.\nDisabling the cache and forcing Smarty compilation When your development has an impact on the front office, whether you are building a theme or simply a module which displays information to the customer, you should force the template file compilation and disable the cache, so as to always see the result of your changes directly.\nGo to the “Performances” page under the “Advanced parameters” menu to change the following Smarty settings:\n Template cache: switch it to “Force compilation”. Cache: disable it.  Forcing the compilation of Smarty will always slow down the loading time of the page. Make sure that your production store is set to only recompile templates if there are updated files, and that its cache is enabled.\nDisplaying error messages PrestaShop’s default settings prevent the customer to see any server error message or any debugging code.\nYou, on the other hand, need this information in order to correct any potential mistake in your code. To that end, open the /config/defines.inc.php file, and edit it to set _PS_MODE_DEV_ to true:\n/* Debug only */ define('_PS_MODE_DEV_', true);  Using the dump() method These two methods enable you to check for the state of a given variable at a specific place within your code.\nPrestaShop used to have custom debug methods available for developers: p($variable) and d($variable). They were used to display the content of a variable, and were really a wrapper around the well-known print_r() method. On top of that, PrestaShop had the ppp() and ddd() methods, which were respectively the aliases of p() and d(); and the various fd(), epr() and dieObject() methods.\nAll of this has changed with PrestaShop 1.7: we now rely solely on Symonfy’s VarDumper::dump() function. You can now rely on a single method instead of having multiple debug functions. The dump() function is very powerful, and is always available on output (even without die()). Moreover, you can use it in your console scripts because this function also has a formatter in CLI mode.\nThe dump() method is not activated by default. To activate it, you must enable the Debug mode, by setting _PS_MODE_DEV_ to true (see above).\nEnabling the multistore mode Since version 1.5, PrestaShop is able to host more than one store within a single installation of the software. Many shop administrators choose to enable this feature, and it can have a significant impact on the way PrestaShop works. You should therefore make sure that anything you code for PrestaShop works in both single and multistore mode.\nEnabling the multistore mode is easy: go to the general preferences page, and put the “Enable Multistore” option to “Yes”.\nYou can switch back and forth between single store and multistore mode ? in single store mode, only the main store is used.\nYou can read more about the multistore mode in the PrestaShop 1.6 User Guide: http://doc.prestashop.com/display/PS16/Managing+Multiple+Shops.\nAbout the configuration files There are three main configuration files, all located in the /config folder:\n config.inc.php defines.inc.php smarty.config.inc.php  config.inc.php It is the main configuration file for PrestaShop. You should not have to touch anything in there.\ndefines.inc.php This file contains PrestaShop constant values.\nIt also contains the location of all the files and folders. If you need to change their location, do not forget to keep the original path nearby, for instance in a PHP comment, in case you need to revert back to it later on.\nWhen in development/test mode, you must make sure that all the error messages are displayed:\n Set define('_PS_MODE_DEV_', false); to true.  On the contrary, when in production mode, you must hide error messages as much as possible!\n Make sure that define('_PS_MODE_DEV_', false); is set to false.  smarty.config.inc.php This file contains all the Smarty-related settings.\nThe Smarty cache system should always be disabled, as it is not compatible with PrestaShop: keep $smarty-\u0026gt;caching = false; as it is.\n$smarty-\u0026gt;compile_check should be left to false in development mode.\n$smarty-\u0026gt;debugging gives access to Smarty debug information when displaying a page. That setting is more easily modified in the “Performance” page of the advanced parameters menu : the “Debug console” option enables you to choose between never displaying Smarty’s debug information, always displaying it, or only displaying it when you add ?SMARTY_DEBUG to the URL of the page you want to test, which can be very useful.\nWhen in production mode, $smarty-\u0026gt;force_compile must be set to false, as it will give a 30% boost to your page load time.\nOn the other hand, when editing a .tpl file, you must delete the /tools/smarty/compile folder (except the index.php file) in order to see your changes applied.\nNote that this setting can be made directly from the back office, in the “Performance” page under the “Advanced parameters” menu.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/development/database/",
	"title": "Database",
	"tags": [],
	"description": "",
	"content": " Accessing the database The database structure By default, PrestaShop’s database tables start with the ps_ prefix. This can be customized during installation\nAll table names are in lowercase, and words are separated with an underscore character (“_”):\n ps_employee ps_manufacturer ps_product ps_product_comment ps_shop_url  When a table establishes the links between two entities, the names of both entities are mentioned in the table’s name. For instance, ps_category_product links products to their category.\nA few details to note about tables:\n Tables which contain translations must end with the _lang suffix. For instance, ps_product_lang contains all the translations for the ps_product table. Tables which contain the records linking to a specific shop must end with the _shop suffix. For instance, ps_category_shop contains the position of each category depending on the store.  There is also a couple of standard practices for data rows within a table:\n Use the id_lang field to store the language associated with a record. Use the id_shop field to store the store associated with a record.  "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/basics/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": " Setting Up Your Local Development Environment Now that you intend to develop for PrestaShop, you are better off keeping all your development work on your machine. The main advantage is that it makes it possible for you to entirely bypass the process of uploading your file on your online server in order to test it. Another advantage is that a local test environment enables you to test code without the risk of breaking your production store. Have a local environment is the essential first step in the path of web development.\nInstalling PrestaShop locally Prerequisites PrestaShop needs the following server configuration in order to run:\n System: Unix, Linux or Windows. Web serve: Apache Web Server 1.3 or any later version. PHP: 5.4 or later. MySQL: 5.0 or later. Server RAM: The more the better…  PrestaShop can also work with Microsoft’s IIS Web server 6.0 or later, and nginx 1.0 or later.\nInstalling a local environment Installing any web-application locally requires that you first install the adequate environment, namely the Apache web server, the PHP language interpreter, the MySQL database server, and ideally the phpMyAdmin tool. This is called an *AMP package: Apache+MySQL+PHP and the operating system, giving WAMP (Windows+Apache+MySQL+PHP), MAMP (Mac OS X+…) and LAMP (Linux+…). Since all of the items packaged are open-source, these installers are most of the time free.\nHere is a selection of free AMP installer:\n XAMPP: http://www.apachefriends.org/en/xampp.html (Windows, Mac OS X, Linux, Solaris) WampServer: http://www.wampserver.com/en/ (Windows) EasyPHP: http://www.easyphp.org/ (Windows) MAMP: http://www.mamp.info/ (Mac OS X)  Configuring PHP PrestaShop needs a few additions to PHP and MySQL in order to fully work. Make sure that your PHP configuration has the following settings and tools:\n GD library. The GD library (https://libgd.github.io/pages/about.html) enables PrestaShop to rework images that you upload, especially resizing them. Dom extension. The Dom extension enables to parse XML documents. PrestaShop uses it for various functionalities, like the Store Locator. It is also used by some modules, as well as the pear_xml_parse library. allow_url_fopen enabled. The allow_url_fopen directive enables modules to access remote files, which is an essential part of the payment process, among others things. It is therefore imperative to have it set to ON.  Here is a section of the php.ini file (the configuration file for PHP):\nextension = php_mysql.dll extension = php_gd2.dll allow_url_fopen = On # also recommended register_globals = Off magic_quotes_gpc = Off allow_url_include = Off  Downloading and extracting the PrestaShop files You can download the latest version of PrestaShop at http://www.prestashop.com/en/downloads.\nYou can download the (unstable) development version on Github: https://github.com/PrestaShop/PrestaShop/archive/develop.zip.\nExtract the PrestaShop files, and put them in the root folder of the AMP installer you chose:\n XAMPP: C:\\xampp\\htdocs or /Applications/xampp/htdocs WampServer: C:\\wamp\\www EasyPHP: C:\\easyphp\\www MAMP: /Applications/MAMP/htdocs/  Creating a database for your local shop Open the phpMyAdmin tool using your browser. Its location depends on the AMP pack you chose:\n http://127.0.0.1/phpmyadmin (XAMPP, WampServer, MAMP), http://127.0.0.1/mysql (EasyPHP)  In the “Databases” tab, indicate the database name you want and validate by clicking on the “Create a database” button.\nInstalling PrestaShop Open the PrestaShop installer, which should be located at http://127.0.0.1/prestashop/install, and follow its instructions.\nYou can read the Getting Started guide for more details: http://doc.prestashop.com/display/PS17/Getting+Started.\nKeeping things secure Once your module is online, its files could be accessed by anyone from the Internet. Even if they cannot trigger anything but PHP errors, you might want to prevent this from happening.\nYou can achieve this by adding an index.php file at the root of any module folder you create. Here is a suggestion for what to put in the file.\nheader(\u0026quot;Expires: Mon, 26 Jul 1997 05:00:00 GMT\u0026quot;); header(\u0026quot;Last-Modified: \u0026quot;.gmdate(\u0026quot;D, d M Y H:i:s\u0026quot;).\u0026quot; GMT\u0026quot;); header(\u0026quot;Cache-Control: no-store, no-cache, must-revalidate\u0026quot;); header(\u0026quot;Cache-Control: post-check=0, pre-check=0\u0026quot;, false); header(\u0026quot;Pragma: no-cache\u0026quot;); header(\u0026quot;Location: ../\u0026quot;); exit;  "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/",
	"title": "1.7",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://devdocs.prestashop.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://devdocs.prestashop.com/1.7/development/coding_standards/commits_and_pull_requests/",
	"title": "Commits &amp; Pull Requests",
	"tags": [],
	"description": "",
	"content": " Commits \u0026amp; Pull Requests conventions Commits In the past, we used to have only one commit by pull request. This was a bad habit. We now require contributors to make atomic commits, so you will surely have more than one commit in a single pull request. This will be helpful to review, cherry-pick or revert (we hope to never have to do that 😉) the changes.\nWhat\u0026rsquo;s an atomic commit? It means that the commit\u0026rsquo;s purpose is one, and only one, complete fix or change. Typically, ask yourself if what you are doing is one or several tasks. Do not hesitate to use git add -p ... (details here) if you have made several changes in the same file but not all those changes are meant to be in the current commit.\nWhen you are modifying CSS and/or JavaScript files, we invite you to make a separate commit for the compiled files. If you want to know more about compiling assets, you can look at our documentation.\nThe commit name should also give an idea of the context or of the file that is being changed. The more details, the better! The commit name should be as unique and recognizable as your commit itself.\nIn the past, we used to ask to prepend commit names with FO, BO, CO\u0026hellip; This is no longer needed.\n Pull Requests Now that you have made atomic commits, you surely have a lot of commits for one pull request. A pull request answers to a given issue. Do not ever make a single pull request for many purposes. Do not hesitate to split your big commit into several subprojects. It will be easier and quicker to review.\nAs all your commits messages are well-formated, just make a summary of your pull request’s purpose in its GitHub title. A summary does not mean it can not be explicit. Please describe what your pull request does in details (avoid \u0026ldquo;Fix product page\u0026rdquo; or \u0026ldquo;Category page improvement\u0026rdquo;). Then, just fill the PR template table to answer some questions which will help the team make a decision faster.\nPlease note that all the pull requests must follow those guidelines. If the commit messages are not well-formatted, the pull request\u0026rsquo;s title is not correct, or the table is not properly filled, we will not be able to accept your pull request.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/development/database/dbquery/",
	"title": "DBQuery class",
	"tags": [],
	"description": "",
	"content": " The DBQuery class The DBQuery class is a query builder which helps you create SQL queries. For instance:\n$sql = new DbQuery(); $sql-\u0026gt;select('*'); $sql-\u0026gt;from('cms', 'c'); $sql-\u0026gt;innerJoin('cms_lang', 'l', 'c.id_cms = l.id_cms AND l.id_lang = '.(int)$id_lang); $sql-\u0026gt;where('c.active = 1'); $sql-\u0026gt;orderBy('position'); return Db::getInstance()-\u0026gt;executeS($sql);  Main methods  __toString()  Generate and get the query.  build()  Generate and get the query (return a string).  from(string $table, mixed $alias = null)  Set table for FROM clause.  groupBy(string $fields)  Add a GROUP BY restriction.  having(string $restriction)  Add a restriction in the HAVING clause (each restriction will be separated by an AND statement).  innerJoin(string $table, string $alias = null, string $on = null)  Add a INNER JOIN clause\nE.g. $this-\u0026gt;innerJoin('product p ON ...').  join(string $join)  Add a JOIN clause\nE.g. $this-\u0026gt;join('RIGHT JOIN'.DB_PREFIX.'produc t p ON ...');.  leftJoin(string $table, string $alias = null, string $on = null)  Add a LEFT JOIN clause.  leftOuterJoin(string $table, string $alias = null, string $on = null)  Add a LEFT OUTER JOIN clause. limit(string $limit, mixed $offset = 0)  Limit results in query.  naturalJoin(string $table, string $alias = null)  Add a NATURAL JOIN clause.  orderBy(string $fields)  Add an ORDER BY restriction.  select(string $fields)  Add fields in query selection.  where(string $restriction)  Add a restriction in WHERE clause (each restriction will be separated by an AND statement).   "
},
{
	"uri": "http://devdocs.prestashop.com/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": " PrestaShop Developer Documentation PrestaShop is a free and Open Source e-commerce web platform, committed to providing the best shopping cart experience for both merchants and customers. It is written in PHP, is highly customizable, supports all the major payment services, is translated in many languages and localized for many countries, has a fully responsive design (both front and back office), and more! Learn more about PrestaShop.\nThis site covers the technical aspects of PrestaShop and it\u0026rsquo;s tailored for theme, module and core developers.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/modules/hooks/",
	"title": "Hooks",
	"tags": [],
	"description": "",
	"content": " Hooks Hooks are a way to associate your code to some specific PrestaShop events.\nMost of the time, they are used to insert content in a page.\nFor instance, the PrestaShop default theme\u0026rsquo;s home page has the following hooks:\n   Hook name Description     displayHeader Displays content in the page\u0026rsquo;s header area.   displayTop Displays content in the page\u0026rsquo;s top area.   displayLeftColumn Displays content in the page\u0026rsquo;s left column.   displayHome Displays content in the page\u0026rsquo;s central area.   displayRightColumn Displays content in the page\u0026rsquo;s right column.   displayFooter Displays content in the page\u0026rsquo;s footer area.    Hooks can also be used to perform specific actions under certain circumstances (i.e. sending an e-mail to the client).\nNaming scheme Hook names are prefixed with \u0026ldquo;action\u0026rdquo; or \u0026ldquo;display\u0026rdquo;. This prefix indicates if a hook is triggered by an event or if it\u0026rsquo;s used to display content:\n action\u0026lt;Something\u0026gt; Triggered by specific events that take place in PrestaShop. display\u0026lt;Something\u0026gt; Result in something being displayed, either in the front-end or the back-end.  Using hooks In a controller It is easy to call a hook from within a controller: you simply have to use its name with the hookExec() method: Module::hookExec('NameOfHook');\nFor instance:\n$this-\u0026gt;context-\u0026gt;smarty-\u0026gt;assign( 'HOOK_LEFT_COLUMN', Module::hookExec('displayLeftColumn') );  In a module In order to attach your code to a hook, you must create a non-static public method, starting with the \u0026ldquo;hook\u0026rdquo; keyword followed by either \u0026ldquo;display\u0026rdquo; or \u0026ldquo;action\u0026rdquo;, and the name of the hook you want to use.\nThis method receives one (and only one) argument: an array of the contextual information sent to the hook.\npublic function hookDisplayNameOfHook($params) { // Your code. }  In order for a module to respond to a hook call, the hook must be registered within PrestaShop. Hook registration is done using the registerHook() method. Registration is usually done during the module\u0026rsquo;s installation.\nIn a theme It is easy to call a hook from within a template file (.tpl): you simply have to use its name with the hook function. You can add the name of a module that you want the hook execute.\nFor instance:\n{hook h='displayLeftColumn' mod='blockcart'}  Creating your own hook You can create new PrestaShop hooks by adding a new record in the ps_hook table in your MySQL database. You could do it the hard way:\nINSERT INTO `ps_hook` (`name`, `title`, `description`) VALUES ('nameOfHook', 'The name of your hook', 'This is a custom hook!');  \u0026hellip;but PrestaShop enables you to do it the easy way:\n$this-\u0026gt;registerHook('NameOfHook');  If the hook \u0026ldquo;NameOfHook\u0026rdquo; doesn\u0026rsquo;t exist, PrestaShop will create it for you. No need to do the SQL query anymore.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/modules/hooks/list_of_hooks/",
	"title": "List of hooks",
	"tags": [],
	"description": "",
	"content": " List of hooks in PrestaShop 1.7 Update notes A couple of hooks were modified between 1.7.0.x and 1.7.1.x.\n actionDeleteProductInCartAfter has been divided into two hooks:  actionObjectProductInCartDeleteBefore. actionObjectProductInCartDeleteAfter.  displayProductButtons has been renamed into displayProductAdditionalInfo.\nDon’t worry, we kept an alias :)  Full list  action\u0026lt;AdminControllerName\u0026gt;\u0026lt;Action\u0026gt;After Called after performing \u0026lt;Action\u0026gt; in any \u0026lt;AdminController\u0026gt;\nLocated in: /classes/controller/AdminController.php\nParameters:\narray( 'controller' =\u0026gt; (AdminController), 'return' =\u0026gt; (mixed) );  action\u0026lt;AdminControllerName\u0026gt;\u0026lt;Action\u0026gt;Before Called before performing \u0026lt;Action\u0026gt; in any \u0026lt;AdminController\u0026gt;\nLocated in: /classes/controller/AdminController.php\nParameters:\narray( 'controller' =\u0026gt; (AdminController) );  action\u0026lt;AdminControllerName\u0026gt;FormModifier Called when rendering a form in any \u0026lt;AdminController\u0026gt;\nLocated in: /classes/controller/AdminController.php\nParameters:\narray( 'object' =\u0026gt; \u0026amp;(ObjectModel), 'fields' =\u0026gt; \u0026amp;(array), 'fields_value' =\u0026gt; \u0026amp;(array), 'form_vars' =\u0026gt; \u0026amp;(array), );  action\u0026lt;AdminControllerName\u0026gt;ListingFieldsModifier Located in: /classes/controller/AdminController.php\nParameters:\narray( 'select' =\u0026gt; \u0026amp;(string), 'join' =\u0026gt; \u0026amp;(string), 'where' =\u0026gt; \u0026amp;(string), 'group_by' =\u0026gt; \u0026amp;(string), 'order_by' =\u0026gt; \u0026amp;(string), 'order_way' =\u0026gt; \u0026amp;(string), 'fields' =\u0026gt; \u0026amp;(array) );  action\u0026lt;AdminControllerName\u0026gt;OptionsModifier Located in: /classes/controller/AdminController.php\nParameters:\narray( 'options' =\u0026gt; \u0026amp;(array), 'option_vars' =\u0026gt; \u0026amp;(array), );  actionAdmin\u0026lt;Action\u0026gt;After Called after performing \u0026lt;Action\u0026gt; in any admin controller\nLocated in: /classes/controller/AdminController.php\nParameters:\narray( 'controller' =\u0026gt; (AdminController), 'return' =\u0026gt; (mixed) );  actionAdmin\u0026lt;Action\u0026gt;Before Called before performing \u0026lt;Action\u0026gt; in any admin controller\nLocated in: /classes/controller/AdminController.php\nParameters:\narray( 'controller' =\u0026gt; (AdminController) );  actionAdminControllerSetMedia Located in: /classes/controller/AdminController.php\nParameters:\nN/A  actionAdminLoginControllerSetMedia Called after adding media to admin login page header\nLocated in: /controllers/admin/AdminLoginController.php\nParameters:\nN/A  actionAdminMetaAfterWriteRobotsFile Called after generating the robots.txt file\nLocated in: /classes/Tools.php\nParameters:\narray( 'rb_data' =\u0026gt; (array) File data, 'write_fd' =\u0026gt; \u0026amp;(resource) File handle );  actionAdminMetaBeforeWriteRobotsFile Called before generating the robots.txt file\nLocated in: /classes/Tools.php\nParameters:\narray( 'rb_data' =\u0026gt; \u0026amp;(array) File data );  actionAdminMetaSave Called after saving the configuration in AdminMeta\nLocated in: /controllers/admin/AdminMetaController.php\nParameters:\nN/A  actionAdminOrdersTrackingNumberUpdate Located in: /controllers/admin/AdminOrdersController.php\nParameters:\narray( 'order' =\u0026gt; (Order), 'customer' =\u0026gt; (Customer), 'carrier' =\u0026gt; (Carrier) );  actionAdminProductsListingFieldsModifier Located in: /src/Adapter/Product/AdminProductDataProvider.php\nParameters:\narray( '_ps_version' =\u0026gt; (string) PrestaShop version, 'sql_select' =\u0026gt; \u0026amp;(array), 'sql_table' =\u0026gt; \u0026amp;(array), 'sql_where' =\u0026gt; \u0026amp;(array), 'sql_order' =\u0026gt; \u0026amp;(array), 'sql_limit' =\u0026gt; \u0026amp;(string), );  actionAdminProductsListingResultsModifier Located in: /src/Adapter/Product/AdminProductDataProvider.php\nParameters:\narray( '_ps_version' =\u0026gt; (string) PrestaShop version, 'products' =\u0026gt; \u0026amp;(PDOStatement), 'total' =\u0026gt; (int), );  actionAdminThemesControllerUpdate_optionsAfter Located in: /controllers/admin/AdminThemesController.php\nParameters:\nN/A  actionAjaxDie\u0026lt;ControllerName\u0026gt;\u0026lt;Method\u0026gt;Before Located in: /classes/controller/Controller.php\nParameters:\narray( 'value' =\u0026gt; (string) );  actionAjaxDieBefore (deprecated since 1.6.1.1)\nLocated in: /classes/controller/Controller.php\n actionAttributeCombinationDelete Located in: /classes/Combination.php\n actionAttributeCombinationSave Located in: /classes/Combination.php\n actionAttributeDelete Called when deleting an attributes features value\nLocated in: /classes/Attribute.php\n actionAttributeGroupDelete Called while deleting an attributes group\nLocated in: /classes/AttributeGroup.php\n actionAttributeGroupSave Called while saving an attributes group\nLocated in: /classes/AttributeGroup.php\n actionAttributeSave Called while saving an attributes features value\nLocated in: /classes/Attribute.php\n actionAuthentication After successful customer authentication\nLocated in: /classes/form/CustomerLoginForm.php\n actionAuthenticationBefore Before a customer successfully signs in\nLocated in: /classes/form/CustomerLoginForm.php\n actionBeforeAjaxDie\u0026lt;ControllerName\u0026gt;\u0026lt;Method\u0026gt; (deprecated since 1.6.1.1) → actionAjaxDie\u0026lt;ControllerName\u0026gt;\u0026lt;Method\u0026gt;Before\nLocated in: /classes/controller/Controller.php\n actionBeforeCartUpdateQty Located in: /classes/Cart.php\n actionCarrierProcess Carrier process\nLocated in: /classes/checkout/CheckoutDeliveryStep.php\n actionCarrierUpdate This hook is called when a carrier is updated\nLocated in:\n /controllers/admin/AdminCarrierWizardController.php /controllers/admin/AdminCarriersController.php   actionCartSave After a product is added to the cart or if the cart\u0026rsquo;s content is modified\nLocated in: /classes/Cart.php\n actionCartSummary Located in: /classes/Cart.php\n actionCartUpdateQuantityBefore Located in: /classes/Cart.php\n actionCategoryAdd Invoked when a category is created\nLocated in: /classes/Category.php\n actionCategoryDelete Invoked when a category is deleted\nLocated in: /classes/Category.php\n actionCategoryUpdate Invoked when a category is modified\nLocated in:\n /classes/Category.php /controllers/admin/AdminProductsController.php   actionClearCache Available since: 1.7.1\nInvoked when the smarty cache is cleared\nLocated in: /classes/Tools.php\n actionClearCompileCache Available since: 1.7.1\nInvoked when the smarty compile cache is cleared\nLocated in: /classes/Tools.php\n actionClearSf2Cache Available since: 1.7.1\nInvoked when the Symfony cache is cleared\nLocated in: /classes/Tools.php\n actionCustomerAccountAdd Invoked when a new customer creates an account successfully\nLocated in: /classes/form/CustomerPersister.php\nParameters:\narray( '_POST' =\u0026gt; (array) $_POST, 'newCustomer' =\u0026gt; (object) Customer object );  actionCustomerAccountUpdate Invoked when a customer updates its account successfully\nLocated in: /classes/form/CustomerPersister.php\n actionCustomerAddGroups Located in: /classes/Customer.php\n actionCustomerBeforeUpdateGroup Located in: /classes/Customer.php\n actionCustomerLogoutAfter Located in: /classes/Customer.php\n actionCustomerLogoutBefore Located in: /classes/Customer.php\n actionDeliveryPriceByPrice Located in: /classes/Carrier.php\n actionDeliveryPriceByWeight Located in: /classes/Carrier.php\n actionDispatcher Located in: /classes/Dispatcher.php\n actionDispatcherAfter Available since: 1.7.1\nThis hook is called at the end of the dispatch method of the Dispatcher\nLocated in: /classes/Dispatcher.php\n actionDispatcherBefore Available since: 1.7.1\nThis hook is called at the beginning of the dispatch method of the Dispatcher\nLocated in: /classes/Dispatcher.php\n actionDownloadAttachment Located in: /controllers/front/AttachmentController.php\n actionEmailAddAfterContent Add extra content after mail content This hook is called just after fetching mail template\nLocated in: /classes/Mail.php\n actionEmailAddBeforeContent Add extra content before mail content This hook is called just before fetching mail template\nLocated in: /classes/Mail.php\n actionEmailSendBefore Before sending an email This hook is used to filter the content or the metadata of an email before sending it or even prevent its sending\nLocated in: /classes/Mail.php\n actionFeatureDelete This hook is called while deleting an attributes features\nLocated in: /classes/Feature.php\n actionFeatureSave This hook is called while saving an attributes features\nLocated in: /classes/Feature.php\n actionFeatureValueDelete This hook is called while deleting an attributes features value\nLocated in: /classes/FeatureValue.php\n actionFeatureValueSave This hook is called while saving an attributes features value\nLocated in: /classes/FeatureValue.php\n actionFrontControllerSetMedia Located in: /classes/controller/FrontController.php\n actionGetExtraMailTemplateVars Located in: /classes/Mail.php\n actionGetIDZoneByAddressID Located in: /classes/Address.php\n actionGetProductPropertiesAfter Located in: /classes/Product.php\n actionGetProductPropertiesBefore Located in: /classes/Product.php\n actionHtaccessCreate After .htaccess creation\nLocated in: /classes/Tools.php\n actionInvoiceNumberFormatted Located in: /classes/order/OrderInvoice.php\n actionModuleInstallAfter Located in: /classes/module/Module.php\n actionModuleInstallBefore Located in: /classes/module/Module.php\n actionModuleRegisterHookAfter Located in: /classes/Hook.php\n actionModuleRegisterHookBefore Located in: /classes/Hook.php\n actionModuleUnRegisterHookAfter Located in: /classes/Hook.php\n actionModuleUnRegisterHookBefore Located in: /classes/Hook.php\n actionObject Located in: /classes/ObjectModel.php\n actionObjectAddAfter Located in: /classes/ObjectModel.php\n actionObjectAddBefore Located in: /classes/ObjectModel.php\n actionObjectAttributeAddBefore Located in: /controllers/admin/AdminAttributesGroupsController.php\n actionObjectAttributeGroupAddBefore Located in: /controllers/admin/AdminAttributesGroupsController.php\n actionObjectDeleteAfter Located in: /classes/ObjectModel.php\n actionObjectDeleteBefore Located in: /classes/ObjectModel.php\n actionObjectProductInCartDeleteAfter Available since: 1.7.1\nThis hook is called after a product is removed from a cart\nLocated in: /controllers/front/CartController.php\n actionObjectProductInCartDeleteBefore Available since: 1.7.1\nThis hook is called before a product is removed from a cart\nLocated in: /controllers/front/CartController.php\n actionObjectUpdateAfter Located in: /classes/ObjectModel.php\n actionObjectUpdateBefore Located in: /classes/ObjectModel.php\n actionOnImageCutAfter Located in: /classes/ImageManager.php\n actionOnImageResizeAfter Located in: /classes/ImageManager.php\n actionOrderEdited This hook is called when an order is edited\nLocated in: /controllers/admin/AdminOrdersController.php\nParameters:\narray( 'order' =\u0026gt; (object) Order );  actionOrderHistoryAddAfter This hook is displayed when a customer returns a product\nLocated in: /classes/order/OrderHistory.php\n actionOrderReturn Called after a new Order Return has been made.\nLocated in: /controllers/front/OrderFollowController.php\nParameters:\narray( 'orderReturn' =\u0026gt; (object) OrderReturn );  actionOrderSlipAdd Called when the quantity of a product changes in an order. WARNING: only invoked when a product is actually removed from an order.\nLocated in: /controllers/admin/AdminOrdersController.php\nParameters:\narray( 'order' =\u0026gt; Order, 'productList' =\u0026gt; array( (int) product ID 1, (int) product ID 2, ..., (int) product ID n ), 'qtyList' =\u0026gt; array( (int) quantity 1, (int) quantity 2, ..., (int) quantity n ) ); The order of IDs and quantities is important!  actionOrderStatusPostUpdate Called after the status of an order changes.\nLocated in: /classes/order/OrderHistory.php\nParameters:\narray( 'newOrderStatus' =\u0026gt; (object) OrderState, 'id_order' =\u0026gt; (int) Order ID );  actionOrderStatusUpdate Called before the status of an order changes.\nLocated in: /classes/order/OrderHistory.php\nParameters:\narray( 'newOrderStatus' =\u0026gt; (object) OrderState, 'id_order' =\u0026gt; (int) Order ID );  actionOutputHTMLBefore Available since: 1.7.1\nBefore HTML output This hook is used to filter the whole HTML page before it is rendered (only front)\nLocated in: /classes/controller/FrontController.php\n actionPasswordRenew Located in: /controllers/front/PasswordController.php\n actionPaymentCCAdd Payment CC added\nLocated in: /classes/order/OrderPayment.php\nParameters:\narray( 'paymentCC' =\u0026gt; (object) OrderPayment object );  actionPaymentConfirmation Called after a payment has been validated\nLocated in: /classes/order/OrderHistory.php\nParameters:\narray( 'id_order' =\u0026gt; (int) Order ID );  actionPDFInvoiceRender Located in:\n /classes/PaymentModule.php /classes/order/OrderHistory.php /controllers/admin/AdminPdfController.php /controllers/front/PdfInvoiceController.php   actionProductAdd This hook is displayed after a product is created\nLocated in: /controllers/admin/AdminProductsController.php\n actionProductAttributeDelete This hook is displayed when a product\u0026rsquo;s attribute is deleted\nLocated in: /classes/Product.php\n actionProductAttributeUpdate This hook is displayed when a product\u0026rsquo;s attribute is updated\nLocated in: /classes/Product.php\n actionProductCancel This hook is called when you cancel a product in an order\nLocated in: /controllers/admin/AdminOrdersController.php\n actionProductCoverage Located in: /classes/stock/StockManager.php\n actionProductDelete This hook is called when a product is deleted\nLocated in: /classes/Product.php\n actionProductOutOfStock This hook displays new action buttons if a product is out of stock\nLocated in:\n /themes/classic/templates/catalog/_partials/product-details.tpl /themes/classic/templates/catalog/product.tpl   actionProductSave This hook is called while saving products\nLocated in: /classes/Product.php\n actionProductSearchAfter Available since: 1.7.1\nThis hook is called after the product search. Parameters are already filter\nLocated in: /classes/controller/ProductListingFrontController.php\n actionProductUpdate This hook is displayed after a product has been updated\nLocated in:\n /classes/Product.php /controllers/admin/AdminProductsController.php   actionSearch Available since: 1.7.1\nAfter the search in the store. Includes both instant and normal search.\nLocated in: /src/Adapter/Search/SearchProductSearchProvider.php\nParameters:\narray( 'expr' =\u0026gt; (string) Search query, 'total' =\u0026gt; (int) Amount of search results );  actionSetInvoice Located in: /classes/order/Order.php\n actionShopDataDuplication After duplicating a shop.\nLocated in: /classes/shop/Shop.php\nParameters:\narray( 'old_id_shop' =\u0026gt; (int) Old shop ID, 'new_id_shop' =\u0026gt; (int) New shop ID );  actionSubmitAccountBefore Available since: 1.7.1\nLocated in: /controllers/front/AuthController.php\n actionUpdateLangAfter Available since: 1.7.1\nUpdate \u0026ldquo;lang\u0026rdquo; tables after adding or updating a language\nLocated in: /classes/Language.php\n actionUpdateQuantity After updating the quantity of a product. Quantity is updated only when a customer effectively places their order\nLocated in: /classes/stock/StockAvailable.php\nParameters:\narray( 'id_product' =\u0026gt; (int) Product ID, 'id_product_attribute' =\u0026gt; (int) Product attribute ID, 'quantity' =\u0026gt; (int) New product quantity );  actionValidateCustomerAddressForm This hook is called when a customer submit its address form\nLocated in: /classes/form/CustomerAddressForm.php\nParameters:\narray( 'cart' =\u0026gt; (object) Cart, 'order' =\u0026gt; (object) Order, 'customer' =\u0026gt; (object) Customer, 'currency' =\u0026gt; (object) Currency, 'orderStatus' =\u0026gt; (object) OrderState );  actionValidateOrder After an order has been validated. Doesn\u0026rsquo;t necessarily have to be paid.\nLocated in: /classes/PaymentModule.php\n actionWatermark After a watermark has been added to an image.\nLocated in:\n /classes/FileUploader.php /classes/webservice/WebserviceSpecificManagementImages.php /controllers/admin/AdminImportController.php /controllers/admin/AdminProductsController.php  Parameters:\narray( 'id_image' =\u0026gt; (int) Image ID, 'id_product' =\u0026gt; (int) Product ID );  additionalCustomerFormFields Add fields to the Customer form This hook returns an array of FormFields to add them to the customer registration form\nLocated in: /classes/form/CustomerFormatter.php\n addWebserviceResources This hook is called when webservice resources list in webservice controller\nLocated in: /classes/webservice/WebserviceRequest.php\n dashboardData Located in: /controllers/admin/AdminDashboardController.php\n dashboardZoneOne Located in: /controllers/admin/AdminDashboardController.php\n dashboardZoneTwo Located in: /controllers/admin/AdminDashboardController.php\n displayAdminAfterHeader Located in:\n admin-dev/themes/default/template/header.tpl admin-dev/themes/new-theme/template/layout.tpl   displayAdminCustomers Display new elements in the Back Office, tab AdminCustomers This hook launches modules when the AdminCustomers tab is displayed in the Back Office\nLocated in: admin-dev/themes/default/template/controllers/customers/helpers/view/view.tpl\nParameters:\narray( 'id_customer' = (int) Customer ID );  displayAdminForm Located in: admin-dev/themes/default/template/helpers/form/form.tpl\n displayAdminListAfter Located in:\n admin-dev/themes/default/template/controllers/countries/helpers/list/list_footer.tpl admin-dev/themes/default/template/controllers/tax_rules/helpers/list/list_footer.tpl admin-dev/themes/default/template/helpers/list/list_footer.tpl   displayAdminListBefore Located in:\n admin-dev/themes/default/template/controllers/tax_rules/helpers/list/list_header.tpl admin-dev/themes/default/template/helpers/list/list_header.tpl   displayAdminLogin Located in: admin-dev/themes/default/template/controllers/login/content.tpl\n displayAdminNavBarBeforeEnd Display new elements in the Back Office, tab AdminCustomers This hook launches modules when the AdminCustomers tab is displayed in the Back Office\nLocated in:\n admin-dev/themes/default/template/nav.tpl admin-dev/themes/new-theme/template/components/layout/nav_bar.tpl   displayAdminOptions Located in: admin-dev/themes/default/template/helpers/options/options.tpl\n displayAdminOrder Display new elements in the Back Office, tab AdminOrder This hook launches modules when the AdminOrder tab is displayed in the Back Office\nLocated in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\nParameters:\narray( 'id_order' = (int) Order ID );  displayAdminOrderContentOrder Display new elements in Back Office, AdminOrder, panel Order This hook launches modules when the AdminOrder tab is displayed in the Back Office and extends / override Order panel content\nLocated in: /controllers/admin/AdminOrdersController.php\n displayAdminOrderContentShip Display new elements in Back Office, AdminOrder, panel Shipping This hook launches modules when the AdminOrder tab is displayed in the Back Office and extends / override Shipping panel content\nLocated in: /controllers/admin/AdminOrdersController.php\n displayAdminOrderLeft Located in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\n displayAdminOrderRight Located in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\n displayAdminOrderTabOrder Display new elements in Back Office, AdminOrder, panel Order This hook launches modules when the AdminOrder tab is displayed in the Back Office and extends / override Order panel tabs\nLocated in: /controllers/admin/AdminOrdersController.php\n displayAdminOrderTabShip Display new elements in Back Office, AdminOrder, panel Shipping This hook launches modules when the AdminOrder tab is displayed in the Back Office and extends / override Shipping panel tabs\nLocated in: /controllers/admin/AdminOrdersController.php\n displayAdminProductsExtra  displayAdminProductsCombinationBottom Located in: /src/PrestaShopBundle/Resources/views/Admin/Product/Include/form_combination.html.twig\n displayAdminProductsMainStepLeftColumnBottom Display new elements in back office product page, left column of This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsMainStepLeftColumnMiddle Display new elements in back office product page, left column of This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsMainStepRightColumnBottom Display new elements in back office product page, right column of This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsOptionsStepBottom Display new elements in back office product page, Options tab This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsOptionsStepTop Display new elements in back office product page, Options tab This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsPriceStepBottom Display new elements in back office product page, Price tab This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsQuantitiesStepBottom Display new elements in back office product page, Quantities/Com This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsSeoStepBottom Display new elements in back office product page, SEO tab This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/Include/form_seo.html.twig\n displayAdminProductsShippingStepBottom Display new elements in back office product page, Shipping tab This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/Include/form_shipping.html.twig\n displayAdminStatsModules Located in: /controllers/admin/AdminStatsTabController.php\n displayAdminView Located in: admin-dev/themes/default/template/helpers/view/view.tpl\n displayAfterBodyOpeningTag Very top of pages Use this hook for advertisement or modals you want to load first\nLocated in:\n /themes/classic/templates/checkout/checkout.tpl /themes/classic/templates/layouts/layout-both-columns.tpl   displayAfterCarrier After carriers list This hook is displayed after the carrier list in Front Office\nLocated in: /classes/checkout/CheckoutDeliveryStep.php\n displayAfterProductThumbs Available since: 1.7.1\nDisplay extra content below product thumbs This hook displays new elements below product images ex. additional media\nLocated in: /themes/classic/templates/catalog/_partials/product-cover-thumbnails.tpl\n displayAfterThemeInstallation Located in: admin-dev/themes/default/template/controllers/themes/helpers/view/view.tpl\n displayAttributeForm Add fields to the form \u0026lsquo;attribute value\u0026rsquo; This hook adds fields to the form \u0026lsquo;attribute value\u0026rsquo;\nLocated in: admin-dev/themes/default/template/controllers/attributes/helpers/form/form.tpl\n displayAttributeGroupForm Add fields to the form \u0026lsquo;attribute group\u0026rsquo; This hook adds fields to the form \u0026lsquo;attribute group\u0026rsquo;\nLocated in: admin-dev/themes/default/template/controllers/attributes_groups/helpers/form/form.tpl\n displayBackOfficeCategory Display new elements in the Back Office, tab AdminCategories This hook launches modules when the AdminCategories tab is displayed in the Back Office\nLocated in: /controllers/admin/AdminCategoriesController.php\n displayBackOfficeFooter Displayed within the admin panel\u0026rsquo;s footer\nLocated in:\n admin-dev/themes/default/template/footer.tpl admin-dev/themes/new-theme/template/footer.tpl   displayBackOfficeHeader Displayed between the \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; tags on every Back Office page (when logged in).\nLocated in: /classes/controller/AdminController.php\n displayBackOfficeOrderActions Located in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\n displayBackOfficeTop Shown above the actual content of a Back Office page\nLocated in: /classes/controller/AdminController.php\n displayBanner Available since: 1.7.1\nLocated in: /themes/classic/templates/_partials/header.tpl\n displayBeforeBodyClosingTag Very bottom of pages Use this hook for your modals or any content you want to load at the very end\nLocated in:\n /themes/classic/templates/checkout/checkout.tpl /themes/classic/templates/layouts/layout-both-columns.tpl   displayBeforeCarrier This hook is displayed before the carrier list on the Front Office\nLocated in: /classes/checkout/CheckoutDeliveryStep.php\nParameters:\narray( 'carriers' =\u0026gt; array( array( 'name' =\u0026gt; (string) Name, 'img' =\u0026gt; (string) Image URL, 'delay' =\u0026gt; (string) Delay text, 'price' =\u0026gt; (float) Total price with tax, 'price_tax_exc' =\u0026gt; (float) Total price without tax, 'id_carrier' =\u0026gt; (int) intified option delivery identifier, 'id_module' =\u0026gt; (int) Module ID )), 'checked' =\u0026gt; (int) intified selected carriers, 'delivery_option_list' =\u0026gt; array(array( 0 =\u0026gt; array( // First address '12,' =\u0026gt; array( // First delivery option available for this address carrier_list =\u0026gt; array( 12 =\u0026gt; array( // First carrier for this option 'instance' =\u0026gt; Carrier Object, 'logo' =\u0026gt; \u0026lt;url to the carrier's logo\u0026gt;, 'price_with_tax' =\u0026gt; 12.4, // Example 'price_without_tax' =\u0026gt; 12.4, // Example 'package_list' =\u0026gt; array( 1, // Example 3, // Example ), ), ), is_best_grade =\u0026gt; true, // Does this option have the biggest grade (quick shipping) for this shipping address is_best_price =\u0026gt; true, // Does this option have the lower price for this shipping address unique_carrier =\u0026gt; true, // Does this option use a unique carrier total_price_with_tax =\u0026gt; 12.5, total_price_without_tax =\u0026gt; 12.5, position =\u0026gt; 5, // Average of the carrier position ), ), )), 'delivery_option' =\u0026gt; array( '\u0026lt;id_address\u0026gt;' =\u0026gt; Delivery option, ... ) );  NOTE: intified means an array of integers \u0026lsquo;intified\u0026rsquo; by Cart::intifier\n displayCarrierExtraContent Display additional content for a carrier (e.g pickup points) This hook calls only the module related to the carrier, in order to add options when needed\nLocated in: /classes/checkout/DeliveryOptionsFinder.php\n displayCarrierList Display extra carriers in the carrier list.\nLocated in: /classes/Cart.php\nParameters:\narray( 'address' =\u0026gt; (object) Address object );  displayCartExtraProductActions Extra buttons in shopping cart This hook adds extra buttons to the product lines, in the shopping cart\nLocated in: /themes/classic/templates/checkout/_partials/cart-detailed-product-line.tpl\n displayCheckoutSubtotalDetails Located in: /themes/classic/templates/checkout/_partials/cart-detailed-totals.tpl\n displayCheckoutSummaryTop Located in: /themes/classic/templates/checkout/_partials/cart-summary.tpl\n displayCMSDisputeInformation Located in: /themes/classic/templates/cms/page.tpl\n displayCMSPrintButton Located in: /themes/classic/templates/cms/page.tpl\n displayCrossSellingShoppingCart Located in: themes/classic/templates/checkout/cart-empty.tpl\n displayContentWrapperBottom Content wrapper section (bottom) This hook displays new elements in the bottom of the content wrapper\nLocated in:\n themes/classic/templates/layouts/layout-both-columns.tpl themes/classic/templates/layouts/layout-content-only.tpl themes/classic/templates/layouts/layout-full-width.tpl themes/classic/templates/layouts/layout-left-column.tpl themes/classic/templates/layouts/layout-right-column.tpl   displayContentWrapperTop Content wrapper section (top) This hook displays new elements in the top of the content wrapper\nLocated in:\n themes/classic/templates/layouts/layout-both-columns.tpl themes/classic/templates/layouts/layout-content-only.tpl themes/classic/templates/layouts/layout-full-width.tpl themes/classic/templates/layouts/layout-left-column.tpl themes/classic/templates/layouts/layout-right-column.tpl   displayCrossSellingShoppingCart Located in: /themes/classic/templates/checkout/cart-empty.tpl\n displayCustomerAccount Displays new elements on the customer account page in Front Office\nLocated in: /themes/classic/templates/customer/my-account.tpl\n displayCustomerAccountForm Displays information on the customer account creation form\nLocated in: /classes/form/CustomerForm.php\n displayCustomerAccountFormTop Displayed above the customer\u0026rsquo;s account creation form\nLocated in: /controllers/front/AuthController.php\n displayCustomerLoginFormAfter Displays new elements after the login form\nLocated in: /themes/classic/templates/customer/authentication.tpl\n displayCustomization Located in: /classes/Product.php\n displayDashboardTop Dashboard Top Displays the content in the dashboard\u0026rsquo;s top area\nLocated in: admin-dev/themes/default/template/page_header_toolbar.tpl\n displayExpressCheckout Located in: /themes/classic/templates/checkout/_partials/cart-detailed-actions.tpl\n displayFeatureForm Add fields to the form \u0026lsquo;feature\u0026rsquo; This hook adds fields to the form \u0026lsquo;feature\u0026rsquo;\nLocated in: admin-dev/themes/default/template/controllers/features/helpers/form/form.tpl\n displayFeaturePostProcess On post-process in admin feature This hook is called on post-process in admin feature\nLocated in: /controllers/admin/AdminFeaturesController.php\n displayFeatureValueForm Add fields to the form \u0026lsquo;feature value\u0026rsquo; This hook adds fields to the form \u0026lsquo;feature value\u0026rsquo;\nLocated in: admin-dev/themes/default/template/controllers/feature_value/helpers/form/form.tpl\n displayFeatureValuePostProcess On post-process in admin feature value This hook is called on post-process in admin feature value\nLocated in: /controllers/admin/AdminFeaturesController.php\n displayFooter Displays new blocks in the footer\nLocated in: /themes/classic/templates/_partials/footer.tpl\n displayFooterAfter Located in: /themes/classic/templates/_partials/footer.tpl\n displayFooterBefore Located in: /themes/classic/templates/_partials/footer.tpl\n displayFooterProduct Added under the product\u0026rsquo;s description\nLocated in: /themes/classic/templates/catalog/product.tpl\n displayHeader Added in the header of every page\nLocated in: /classes/controller/FrontController.php\n displayHome Displayed on the content of the home page.\nLocated in: /controllers/front/IndexController.php\n displayInvoice Invoice This hook displays new blocks on the invoice (order)\nLocated in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\n displayInvoiceLegalFreeText PDF Invoice - Legal Free Text This hook allows you to modify the legal free text on PDF invoices\nLocated in: /classes/pdf/HTMLTemplateInvoice.php\n displayLeftColumn Displays new elements in the left-hand column\nLocated in: /themes/classic/templates/layouts/layout-both-columns.tpl\n displayLeftColumnProduct Displays new elements in the left-hand column of the product page\nLocated in: /themes/classic/templates/layouts/layout-both-columns.tpl\n displayMaintenance Maintenance Page This hook displays new elements on the maintenance page\nLocated in: /classes/controller/FrontController.php\n displayMyAccountBlock Displays extra information within the \u0026ldquo;my account: block\nLocated in: /themes/classic/modules/ps_customeraccountlinks/ps_customeraccountlinks.tpl\n displayNav1 Located in:\n /themes/classic/templates/_partials/header.tpl /themes/classic/templates/checkout/_partials/header.tpl   displayNav2 Located in:\n /themes/classic/templates/_partials/header.tpl /themes/classic/templates/checkout/_partials/header.tpl   displayNavFullWidth Navigation This hook displays full width navigation menu at the top of your pages\nLocated in:\n /themes/classic/templates/_partials/header.tpl /themes/classic/templates/checkout/_partials/header.tpl   displayNotFound Located in: /themes/classic/templates/errors/not-found.tpl\n displayOrderConfirmation Called within an order\u0026rsquo;s confirmation page\nLocated in: /controllers/front/OrderConfirmationController.php\nParameters:\narray( 'total_to_pay' =\u0026gt; (float) Total amount with tax, 'currency' =\u0026gt; (string) Currency sign, 'objOrder' =\u0026gt; (object) Order, 'currencyObj' =\u0026gt; (object) Currency );  displayOrderConfirmation1 Located in: /themes/classic/templates/checkout/order-confirmation.tpl\n displayOrderConfirmation2 Located in: /themes/classic/templates/checkout/order-confirmation.tpl\n displayOrderDetail Displayed within the order\u0026rsquo;s details in Front Office\nLocated in:\n /controllers/front/GuestTrackingController.php /controllers/front/OrderDetailController.php  Parameters:\narray( 'order' =\u0026gt; (object) Order object );  displayPaymentByBinaries Payment form generated by binaries This hook displays form generated by binaries during the checkout\nLocated in: /themes/classic/templates/checkout/_partials/steps/payment.tpl\n displayPaymentEU Located in: /modules/ps_legalcompliance/ps_legalcompliance.php\n displayPaymentReturn Payment return\nLocated in: /controllers/front/OrderConfirmationController.php\n displayPaymentTop Top of payment page This hook is displayed at the top of the payment page\nLocated in: /themes/classic/templates/checkout/_partials/steps/payment.tpl\n displayProductAdditionalInfo Available since: 1.7.1\nProduct page additional info This hook adds additional information on the product page\nLocated in:\n /themes/classic/templates/catalog/_partials/product-additional-info.tpl /themes/classic/templates/catalog/_partials/quickview.tpl   displayProductListReviews Available since: 1.7.1\nLocated in: /themes/classic/templates/catalog/_partials/miniatures/product.tpl\n displayProductPriceBlock Located in:\n /themes/classic/templates/catalog/_partials/miniatures/product.tpl /themes/classic/templates/catalog/_partials/product-prices.tpl /themes/classic/templates/checkout/_partials/cart-summary-product-line.tpl /themes/classic/templates/checkout/_partials/order-confirmation-table.tpl   displayReassurance Located in:\n /themes/classic/templates/catalog/product.tpl /themes/classic/templates/checkout/cart.tpl /themes/classic/templates/checkout/checkout.tpl   displayRightColumn Displays new elements in the right-hand column\nLocated in: /themes/classic/templates/layouts/layout-both-columns.tpl\nParameters:\narray( 'cart' =\u0026gt; (object) Cart object ); Note that the Cart object can also be retrieved from the current Context.  displayRightColumnProduct Displays new elements in the right-hand column of the product page\nLocated in: /themes/classic/templates/layouts/layout-both-columns.tpl\n displaySearch Located in: /themes/classic/templates/errors/not-found.tpl\n displayShoppingCart Displays new action buttons within the shopping cart\nLocated in: /themes/classic/templates/checkout/cart.tpl\n displayShoppingCartFooter Shopping cart footer This hook displays some specific information on the shopping cart\u0026rsquo;s page\nLocated in: /themes/classic/templates/checkout/cart.tpl\n displayTop Top of pages This hook displays additional elements at the top of your pages\nLocated in:\n /themes/classic/templates/_partials/header.tpl /themes/classic/templates/checkout/_partials/header.tpl   displayWrapperBottom Main wrapper section (bottom) This hook displays new elements in the bottom of the main wrapper\nLocated in:\n themes/classic/templates/checkout/checkout.tpl themes/classic/templates/layouts/layout-both-columns.tpl   displayWrapperTop Main wrapper section (top) This hook displays new elements in the top of the main wrapper\nLocated in:\n themes/classic/templates/checkout/checkout.tpl themes/classic/templates/layouts/layout-both-columns.tpl   filterCmsCategoryContent Filter the content page category This hook is called just before fetching content page category\nLocated in: /controllers/front/CmsController.php\n filterCmsContent Filter the content page This hook is called just before fetching content page\nLocated in: /controllers/front/CmsController.php\n filterHtmlContent Filter HTML field before rending a page This hook is called just before fetching a page on HTML field\nLocated in: /src/Adapter/ObjectPresenter.php\n filterManufacturerContent Filter the content page manufacturer This hook is called just before fetching content page manufacturer\nLocated in: /controllers/front/listing/ManufacturerController.php\n filterProductContent Filter the content page product This hook is called just before fetching content page product\nLocated in: /controllers/front/ProductController.php\n filterProductSearch Available since: 1.7.1\nLocated in: /classes/controller/ProductListingFrontController.php\n filterSupplierContent Located in: /controllers/front/listing/SupplierController.php\n moduleRoutes Located in: /classes/Dispatcher.php\n overrideMinimalPurchasePrice Located in:\n /classes/controller/ModuleFrontController.php /src/Adapter/Cart/CartPresenter.php   sendMailAlterTemplateVars Located in: /prestashop/classes/Mail.php\n termsAndConditions Located in: /classes/checkout/ConditionsToApproveFinder.php\n updateProduct Located in:\n /classes/Product.php /classes/webservice/WebserviceSpecificManagementImages.php   validateCustomerFormFields Located in: /classes/form/CustomerForm.php\n   "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/themes/migration_from_16/",
	"title": "Migrating from PrestaShop 1.6",
	"tags": [],
	"description": "",
	"content": " Migrating from PrestaShop 1.6 PrestaShop 1.7 introduces a totally reworked theme system from version 1.6, with the goal of making PrestaShop upgrades easier, and making it easier and faster to create a brand new theme.\nThe huge change to the theme system means that there is no easy way to migrate your PrestaShop 1.6 theme to PrestaShop 1.7.\nWhen using the automatic upgrade from PrestaShop 1.6 to 1.7, your theme will be switched to the new default theme, called \u0026ldquo;Classic\u0026rdquo;. We therefore recommend working on your 1.7 theme before you make the switch to PrestaShop 1.7.\nSome features have been dropped with PrestaShop 1.7. They were either already deprecated in 1.6, or proved too problematic to maintain.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/development/database/objectmodel/",
	"title": "ObjectModel class",
	"tags": [],
	"description": "",
	"content": " The ObjectModel class When needing to dive deep, you have to use the ObjectModel class. This is the main object of PrestaShop’s object model. It can be overridden… with precaution.\nIt is an Active Record kind of class (see: http://en.wikipedia.org/wiki/Active_record_pattern). The table attributes or view attributes of PrestaShop’s database are encapsulated in this class. Therefore, the class is tied to a database record. After the object has been instantiated, a new record is added to the database. Each object retrieves its data from the database; when an object is updated, the record to which it is tied is updated as well. The class implements accessors for each attribute.\nDefining the model You must use the $definition static variable in order to define the model.\nFor instance:\n/** * Example from the CMS model (CMSCore) */ public static $definition = array( 'table' =\u0026gt; 'cms', 'primary' =\u0026gt; 'id_cms', 'multilang' =\u0026gt; true, 'fields' =\u0026gt; array( 'id_cms_category' =\u0026gt; array('type' =\u0026gt; self::TYPE_INT, 'validate' =\u0026gt; 'isUnsignedInt'), 'position' =\u0026gt; array('type' =\u0026gt; self::TYPE_INT), 'active' =\u0026gt; array('type' =\u0026gt; self::TYPE_BOOL), // Language fields 'meta_description' =\u0026gt; array('type' =\u0026gt; self::TYPE_STRING, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isGenericName', 'size' =\u0026gt; 255), 'meta_keywords' =\u0026gt; array('type' =\u0026gt; self::TYPE_STRING, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isGenericName', 'size' =\u0026gt; 255), 'meta_title' =\u0026gt; array('type' =\u0026gt; self::TYPE_STRING, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isGenericName', 'required' =\u0026gt; true, 'size' =\u0026gt; 128), 'link_rewrite' =\u0026gt; array('type' =\u0026gt; self::TYPE_STRING, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isLinkRewrite', 'required' =\u0026gt; true, 'size' =\u0026gt; 128), 'content' =\u0026gt; array('type' =\u0026gt; self::TYPE_HTML, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isString', 'size' =\u0026gt; 3999999999999), ), );  Multiple stores and/or languages In order to retrieve an object in many languages:\n'multilang' =\u0026gt; true  In order to retrieve an object depending on the current store:\n'multishop' =\u0026gt; true  In order to retrieve an object which depends on the current store, and in many languages:\n'multilang_shop' =\u0026gt; true  Main methods  __construct($id = NULL, $id_lang = NULL)  Build object.  add($autodate = true, $nullValues = false)  Save current object to database (add or update). associateTo(integer|array $id_shops)\n  Associate an item to its context. delete()  Delete current object from database. deleteImage(mixed $force_delete = false)\n  Delete images associated with the object. deleteSelection($selection)  Delete several objects from database. getFields()  Prepare fields for ObjectModel class (add, update). getValidationRules($className = _CLASS_)  Return object validation rules (field validity). save($nullValues = false, $autodate = true)  Save current object to database (add or update). toggleStatus()  Toggle object\u0026rsquo;s status in database. update($nullValues = false)  Update current object to database. validateFields($die = true, $errorReturn = false)  Check for field validity before database interaction.   "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/themes/rtl/",
	"title": "RTL support",
	"tags": [],
	"description": "",
	"content": " RTL support PrestaShop supports RTL (Right-to-left) themes natively.\nRTL stylesheets There are two ways of customizing your theme for RTL: either by adding an override file that is only loaded for RTL languages, or by using completely different version of the theme\u0026rsquo;s stylesheets.\nCSS override file PrestaShop will try to load a css file named rtl.css after your theme\u0026rsquo;s ones when displayed in an RTL language. You can use this file to place any style override you need for RTL.\nRTL version  When the shop is displayed in an RTL language, PrestaShop will automatically try and load RTL versions of the theme\u0026rsquo;s stylesheets if they are available, instead of the \u0026ldquo;normal\u0026rdquo; ones.\nRTL versions are automatically \u0026ldquo;discovered\u0026rdquo; by PrestaShop using a simple convention: to obtain the RTL version name, you just need to add _rtl to the end of the standard file name.\nExample:\n   Original name RTL version name     theme.css theme_rtl.css   theme-custom.css theme-custom_rtl.css    Stylesheet generation  PrestaShop can also automagically generate an RTL version of your theme\u0026rsquo;s stylesheets based on the original CSS files.\nFollow this steps to generate RTL stylesheets for your theme:\n Open your shop\u0026rsquo;s Back Office. Go to the \u0026ldquo;Design \u0026gt; Theme \u0026amp; Logo\u0026rdquo; page. Scroll down to the \u0026ldquo;Adaptation to right-to-left languages\u0026rdquo; section.\nNote: this is only visible if you have an RTL language installed on your shop. Choose the theme you want to generate stylesheets for. Toggle \u0026ldquo;Generate RTL stylesheet\u0026rdquo; to \u0026ldquo;Yes\u0026rdquo;. Press \u0026ldquo;Save\u0026rdquo;.   RTL generation in the back office   This process will generate _rtl.css files for every .css file in the theme.\nPrestaShop won\u0026rsquo;t generate a file if one with the same name already exists.\nIf you want to regenerate a file, you have to delete it first.\n Polishing it up Sometimes the automatic transformation won\u0026rsquo;t be enough to get your theme exactly how you want it.\nYou should never modify generated _rtl.css files – they are generated automatically by PrestaShop.\nIf you need to add some specific css to fix your RTL transformed files, use .rtlfix files. The content of those files is appended to the RTL version of that file after it\u0026rsquo;s transformed.\nThis is what PrestaShop does for each .css file in the theme:\n Take a file (let\u0026rsquo;s say it\u0026rsquo;s called my-file.css) If my-file_rtl.css exists, move on to the next file. Transform my-file.css to RTL and save its contents to my-file_rtl.css If a file named my-file.rtlfix exists, append its contents to my-file_rtl.css.  "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/themes/getting_started/setting_up_your_local_environment/",
	"title": "Setting up your local environment",
	"tags": [],
	"description": "",
	"content": " Setting up your local environment Now that you intend to building a theme for PrestaShop, you are better off keeping all your development work on your machine. The main advantage is that it makes it possible for you to entirely bypass the process of uploading your files on your online server in order to test your changes. Another advantage is that a local test environment enables you to test code without the risk of breaking your production store. Having a local environment is the essential first step in the path of web development.\nThe following content assumes you’re a developer and you want to create a theme or a module.\n Installing PrestaShop We advise you to install PrestaShop using Git and Composer.\nOpen a command line on your (empty) working directory, then:\n Clone PrestaShop\ngit clone https://github.com/PrestaShop/PrestaShop.git  Install dependencies\ncomposer install   Using git you can choose your PrestaShop version:\ngit checkout 1.7.2.0  Also we would warn you to test your final result with a zip release, just for safety (since vendor version might be slightly different).\nIf you haven’t done it yet, we strongly recommend you to read our article Set Up Your Git For Contributing\n Building your .gitignore file A gitignore file is a must-have for any Git-versioned project, as it specifies intentionally untracked files that Git should ignore.\nWhat to ignore Generally, you shouldn’t version the following types of files:\n Temporary files (such as cache files) Generated files (such as minified CSS or retrieved XML files) Files with credentials or personal information (such as settings.inc.php) OS and IDE-related files (such as .DS_Store or .idea/) assets/css/* assets/js/* node_modules/  We suggest that you build your own using http://gitignore.io.\nIf you are building a full project for a client, you can read our article on building a gitignore for PrestaShop.\n Create your theme from the Starter Theme When you want to create a theme, the best way is to use the Starter Theme as a base theme.\nCreate a new folder under themes/, download the Starter Theme, and copy its files in your new folder.\nDownload the Starter Theme\nCreate your theme.yml file First of all, you need to rename config/theme.dist.yml to config/theme.yml and edit it according to the name of your theme.\nname: YOUR_THEME_DIRECTORY_NAME display_name: YOUR THEME NAME version: 1.0.0 author: name: \u0026quot;PrestaShop Team\u0026quot; email: \u0026quot;pub@prestashop.com\u0026quot; url: \u0026quot;http://www.prestashop.com\u0026quot; meta: compatibility: from: 1.7.3.0 to: ~  "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/documentation/shortcodes/",
	"title": "Shortcodes",
	"tags": [],
	"description": "",
	"content": " Shortcodes Hugo provides some nice features that extend Markdown: shortcodes.\nSome default shortcodes are provided by Hugo (You can read more about them on the Shortcodes documentation. ), but some are custom-made for this theme, so read on.\nQuick reference Here are the most useful shortcodes:\nCross links To link to another page in the documentation, use ref:\n[This is a link to Configuration]({{\u0026lt; ref \u0026quot;1.7/basics/configuration.md\u0026quot; \u0026gt;}})  Rendered code:\nThis is a link to Configuration\nDon\u0026rsquo;t forget to put the link between double quotes.\n Internal links To a link that points to a specific point in the current page, use relref:\n[This is a link to Shortcodes]({{\u0026lt; ref \u0026quot;#extended-features-shortcodes\u0026quot; \u0026gt;}})  Rendered code:\nThis is a link to Shortcodes\nInternal links need to be \u0026ldquo;slugified\u0026rdquo; to work.\nIf you feel lost, here\u0026rsquo;s a tool that will slugify your titles.\n Notes / tip block You can add notice blocks to make some information stand out:\nNote {{% notice note %}} This is something you may want to know. {{% /notice %}}  Renders to:\nThis is something you may want to know.\n Tip {{% notice tip %}} Everything will be fine, trust me. {{% /notice %}}  Renders to:\nEverything will be fine, trust me.\n Info {{% notice info %}} This is pretty important, you should pay attention. {{% /notice %}}  Renders to:\nThis is pretty important, you should pay attention.\n Warning {{% notice warning %}} Watch out, danger zone! {{% /notice %}}  Renders to:\nWatch out, danger zone!\n "
},
{
	"uri": "http://devdocs.prestashop.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]