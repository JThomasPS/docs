<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Prestashop Developer Documentation</title>
    <link>http://devdocs.prestashop.com/</link>
    <description>Recent content in Home on Prestashop Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Feb 2018 16:56:23 +0100</lastBuildDate>
    
	<atom:link href="http://devdocs.prestashop.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Guidelines and coding standards</title>
      <link>http://devdocs.prestashop.com/1.7/themes/guidelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/themes/guidelines/</guid>
      <description>Guidelines and coding standards Compatibility PHP Code Your PHP code should be compatible with the following versions:
 PrestaShop 1.7.0  ~ 1.7.3  : at least PHP 5.4 PrestaShop 1.7.4  : at least PHP 5.6  HTML / CSS / Javascript Your HTML/CSS/JS code should work with at least:
 IE9+ Edge Firefox 45 Chrome 29.  Mobile-wise:
 iOS 8.4 Android Browser 4.4  Standards General Use spaces for indentation in every language (PHP, HTML, CSS, etc.</description>
    </item>
    
    <item>
      <title>Why write documentation</title>
      <link>http://devdocs.prestashop.com/1.7/documentation/why/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/documentation/why/</guid>
      <description>Why write technical documentation?  The best documentation is no documentation: code should be self-explanatory.
All the lazy developers in history
 Writing documentation is hard.
We try to find excuses and rationalize and lie to ourselves so we can feel better about with the fact that we should be doing it, but it&amp;rsquo;s &amp;ldquo;too much work&amp;rdquo;.
Here are two good reasons to try and convince you to start writing documentation, and help you while you help others, too:</description>
    </item>
    
    <item>
      <title>How to contribute</title>
      <link>http://devdocs.prestashop.com/1.7/documentation/how/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/documentation/how/</guid>
      <description>How to contribute to PrestaShop&amp;rsquo;s documentation TL;DR ‚Äì Contributing is super easy! Edit any page by clicking on the &amp;ldquo;Improve this page&amp;rdquo; link at the top right corner of your screen.
Getting started There are two ways to contribute to this documentation:
Edit on GitHub You can pretty much everything directly on GitHub! Click on the &amp;ldquo;Improve this page&amp;rdquo; at the top right of the page you want to edit.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>http://devdocs.prestashop.com/1.7/basics/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/basics/introduction/</guid>
      <description>Fundamentals of PrestaShop Development PrestaShop was conceived so that third-party modules could easily build upon its foundations, making it an extremely customizable e-commerce software.
PrestaShop‚Äôs customization is based on three possibilities:
 Themes, Modules, Overriding.  Themes are explored in full in the Designer Guide.
Modules and the override system are explored in this Developer Guide, starting with the ‚ÄúConcepts‚Äù section below. You can learn more about each in the following chapters:</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>http://devdocs.prestashop.com/1.7/basics/installation/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/basics/installation/configuration/</guid>
      <description>Configuring PrestaShop By default, PrestaShop is configured to provide a secure and stable environment to both the shop administrator and the customers.
As a developer, there are several changes that you could and should bring to the default installation in order to help you code better, spot bugs faster, and generally make a great PrestaShop product.
Disabling the cache and forcing Smarty compilation When your development has an impact on the front office, whether you are building a theme or simply a module which displays information to the customer, you should force the template file compilation and disable the cache, so as to always see the result of your changes directly.</description>
    </item>
    
    <item>
      <title>Commits &amp; Pull Requests</title>
      <link>http://devdocs.prestashop.com/1.7/development/coding_standards/commits_and_pull_requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/development/coding_standards/commits_and_pull_requests/</guid>
      <description>Commits &amp;amp; Pull Requests conventions Commits In the past, we used to have only one commit by pull request. This was a bad habit. We now require contributors to make atomic commits, so you will surely have more than one commit in a single pull request. This will be helpful to review, cherry-pick or revert (we hope to never have to do that üòâ) the changes.
What&amp;rsquo;s an atomic commit?</description>
    </item>
    
    <item>
      <title>DBQuery class</title>
      <link>http://devdocs.prestashop.com/1.7/development/database/dbquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/development/database/dbquery/</guid>
      <description>The DBQuery class The DBQuery class is a query builder which helps you create SQL queries. For instance:
$sql = new DbQuery(); $sql-&amp;gt;select(&#39;*&#39;); $sql-&amp;gt;from(&#39;cms&#39;, &#39;c&#39;); $sql-&amp;gt;innerJoin(&#39;cms_lang&#39;, &#39;l&#39;, &#39;c.id_cms = l.id_cms AND l.id_lang = &#39;.(int)$id_lang); $sql-&amp;gt;where(&#39;c.active = 1&#39;); $sql-&amp;gt;orderBy(&#39;position&#39;); return Db::getInstance()-&amp;gt;executeS($sql);  Main methods  __toString()  Generate and get the query.  build()  Generate and get the query (return a string).  from(string $table, mixed $alias = null)  Set table for FROM clause.</description>
    </item>
    
    <item>
      <title>List of hooks</title>
      <link>http://devdocs.prestashop.com/1.7/modules/hooks/list_of_hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/modules/hooks/list_of_hooks/</guid>
      <description>List of hooks in PrestaShop 1.7 Update notes A couple of hooks were modified between 1.7.0.x and 1.7.1.x.
 actionDeleteProductInCartAfter has been divided into two hooks:  actionObjectProductInCartDeleteBefore. actionObjectProductInCartDeleteAfter.  displayProductButtons has been renamed into displayProductAdditionalInfo.
Don‚Äôt worry, we kept an alias :)  Full list  action&amp;lt;AdminControllerName&amp;gt;&amp;lt;Action&amp;gt;After Called after performing &amp;lt;Action&amp;gt; in any &amp;lt;AdminController&amp;gt;
Located in: /classes/controller/AdminController.php
Parameters:
array( &#39;controller&#39; =&amp;gt; (AdminController), &#39;return&#39; =&amp;gt; (mixed) );  action&amp;lt;AdminControllerName&amp;gt;&amp;lt;Action&amp;gt;Before Called before performing &amp;lt;Action&amp;gt; in any &amp;lt;AdminController&amp;gt;</description>
    </item>
    
    <item>
      <title>Migrating from PrestaShop 1.6</title>
      <link>http://devdocs.prestashop.com/1.7/themes/migration_from_16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/themes/migration_from_16/</guid>
      <description>Migrating from PrestaShop 1.6 PrestaShop 1.7 introduces a totally reworked theme system from version 1.6, with the goal of making PrestaShop upgrades easier, and making it easier and faster to create a brand new theme.
The huge change to the theme system means that there is no easy way to migrate your PrestaShop 1.6 theme to PrestaShop 1.7.
When using the automatic upgrade from PrestaShop 1.6 to 1.7, your theme will be switched to the new default theme, called &amp;ldquo;Classic&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>ObjectModel class</title>
      <link>http://devdocs.prestashop.com/1.7/development/database/objectmodel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/development/database/objectmodel/</guid>
      <description>The ObjectModel class When needing to dive deep, you have to use the ObjectModel class. This is the main object of PrestaShop‚Äôs object model. It can be overridden‚Ä¶ with precaution.
It is an Active Record kind of class (see: http://en.wikipedia.org/wiki/Active_record_pattern). The table attributes or view attributes of PrestaShop‚Äôs database are encapsulated in this class. Therefore, the class is tied to a database record. After the object has been instantiated, a new record is added to the database.</description>
    </item>
    
    <item>
      <title>RTL support</title>
      <link>http://devdocs.prestashop.com/1.7/themes/rtl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/themes/rtl/</guid>
      <description>RTL support PrestaShop supports RTL (Right-to-left) themes natively.
RTL stylesheets There are two ways of customizing your theme for RTL: either by adding an override file that is only loaded for RTL languages, or by using completely different version of the theme&amp;rsquo;s stylesheets.
CSS override file PrestaShop will try to load a css file named rtl.css after your theme&amp;rsquo;s ones when displayed in an RTL language. You can use this file to place any style override you need for RTL.</description>
    </item>
    
    <item>
      <title>Setting up your local environment</title>
      <link>http://devdocs.prestashop.com/1.7/themes/getting_started/setting_up_your_local_environment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/themes/getting_started/setting_up_your_local_environment/</guid>
      <description>Setting up your local environment Now that you intend to building a theme for PrestaShop, you are better off keeping all your development work on your machine. The main advantage is that it makes it possible for you to entirely bypass the process of uploading your files on your online server in order to test your changes. Another advantage is that a local test environment enables you to test code without the risk of breaking your production store.</description>
    </item>
    
  </channel>
</rss>